CONTENTS OF THIS FILE
---------------------

 * Introduction
 * Requirements
 * Installation
 * Configuration
 * Maintainers

INTRODUCTION
------------
History:
 This is a demo site for Catholic Releif services.

Description:
 Ssa is a demo of fetching data from the USAID ForeignAssistance.gov dataset.

Technical:
  Data is fetched from a JSON query, as documented at https://dev.socrata.com/foundry/data.usaid.gov/azij-hu6e

  My approach was to write a page controller for the project. In twig (ssa-page.html.twig), it displays the block SsaForm, which uses ssa-block.html to present it. Unfortunately I didn't have enough time to properly theme it.

  The page simply displays the form. The form displays a list of countries. When submitted, the selected country name. The name is stored in a config variable, to supply the default value when the form is redisplayed. It next calls the member function getRemoteData() to retried the raw data from the USAID database, and returns the decoded JSON data.

  Next, the returned data is used to build a table, which is then rendered and sent to the template.



REQUIREMENTS
------------
Twig tweak module.


INSTALLATION
------------
Install as you would normally install a contributed Drupal module. Visit:
https://www.drupal.org/documentation/install/modules-themes/modules-8
for further information.


CONFIGURATION
-------------
No configuration is required. There is an option on the page to limit the number of items returned.


FUTURE ENHANCEMENTS
-------------------
1) Add theming. I did provide a hook to pull in css from the module.
2) Possibly cache returned query data fir same query.
3) The limit of returned rows in the response is currently hard coded; this could be an option on the form.
4) I couldn't find w way to return a list of the coutries they support, so I created a hard coded list for testing. If this is available from their API, I would call that for the information. Conceivably it could be generated by doing a huge query of all countries with no limit, but that would be time consuming, not nice to do, and put a big load on the system.
5) Add more exception handling, in case a query failed.
6) Get an API token for better performance.


MAINTAINER
----------
Phil Glatz, phil@electronovelty.com
